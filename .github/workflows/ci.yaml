name: Build CI

on:
  pull_request:
  push:
    branches:
      - main
    path:
      - "!dev-docs/**"
      - "!README.md"
  workflow_call:
    inputs:
      tag:
        description: "Tag for Go project build workflow"
        required: true
        type: string

env:
  GO_VERSION: "1.23.6"
  GOLANGCI_LINT_VERSION: v1.63.4

jobs:
  ### CLI codebase
  cli-test:
    if: github.event.pull_request.draft == false # Skip CI for draft PRs
    name: CLI - Test and Coverage
    runs-on: ubuntu-latest
    services:
      minio:
        image: quay.io/minio/minio
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20
          --entrypoint /bin/sh
          --command -c "mkdir -p /data && minio server /data --console-address ':9001'"
    env:
      DB_DATABASE: CicdApplication
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: localhost
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    defaults:
      run:
        shell: bash
        working-directory: ./CLI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0 # Ensure full history is available
      - name: Verify Git commit
        run: git rev-parse HEAD
      # MinIO
      - name: Install MinIO Client (mc)
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/
      - name: Configure MinIO Client
        run: |
          mc alias set local http://localhost:9000 minioadmin minioadmin
      # Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      # MySQL
      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
      - name: Apply SQL File
        working-directory: ./backend # Change if your SQL file is elsewhere
        run: ls && mysql -u root -p"${{ env.DB_PASSWORD }}" ${{ env.DB_DATABASE }} < ./db/init.sql
      # Run tests
      - name: Run local api for CLI testing
        working-directory: ./backend
        env:
          MINIO_ENDPOINT: http://localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          DEFAULT_BUCKET: test-bucket
        run: |
          go mod tidy
          nohup go run . > ../server.log 2>&1 &  # Run the Go application in the background
          # Wait until the server is ready to accept requests
          until curl -s http://localhost:8080 > /dev/null; do
            echo "Waiting for server to start..."
            sleep 1  # Wait for 1 second before trying again
          done
          echo "Server is up, making the request..."
          curl http://localhost:8080

      - name: Generate executable
        run: chmod +x coverage.sh
      - name: Install dependecies
        run: go mod tidy
      - name: Run Tests
        run: go test ./... -coverprofile=./cover.out
      - name: Get Docker logs
        run: docker ps -aq | xargs -I {} docker logs {}
      - name: Generate coverage report
        run: ./coverage.sh > ./reports/test-summary.txt
      #### Upload
      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: CLI_TestReports
          path: ./CLI/reports/*

  cli-build:
    needs: cli-test
    name: CLI - Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./CLI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build code
        run: |
          go mod tidy
          go build

  cli-golangci-lint:
    name: CLI - Run Lint
    runs-on: ubuntu-latest
    needs: cli-build
    continue-on-error: true
    defaults:
      run:
        shell: bash
        working-directory: ./CLI
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-${{ runner.os }}-
      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: golangci-${{ runner.os }}-${{ hashFiles('.github/workflows/ci.yaml') }}
          restore-keys: |
            golangci-${{ runner.os }}-
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: Run golangci-lint
        run: golangci-lint run --config=.golangci.yaml

  ### backend codebase
  backend-test:
    if: github.event.pull_request.draft == false # Skip CI for draft PRs
    name: backend - Test and Coverage
    runs-on: ubuntu-latest
    services:
      minio:
        image: quay.io/minio/minio
        ports:
          - 9000:9000
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live || exit 1"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 20
          --entrypoint /bin/sh
          --command -c "mkdir -p /data && minio server /data --console-address ':9001'"
    defaults:
      run:
        shell: bash
        working-directory: ./backend
    env:
      DB_DATABASE: CicdApplication
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: localhost
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      # Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      # MinIO
      - name: Install MinIO Client (mc)
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/
      - name: Configure MinIO Client
        run: |
          mc alias set local http://localhost:9000 minioadmin minioadmin
      # MySQL
      - name: Set up MySQL
        run: |
          sudo systemctl start mysql
          mysql -e 'CREATE DATABASE ${{ env.DB_DATABASE }};' -u${{ env.DB_USER }} -p${{ env.DB_PASSWORD }}
      - name: Apply SQL File
        working-directory: ./backend # Change if your SQL file is elsewhere
        run: mysql -u root -p"${{ env.DB_PASSWORD }}" ${{ env.DB_DATABASE }} < ./db/init.sql
      - name: Generate executable
        run: chmod +x coverage.sh
      - name: Create Env var
        run: 'echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}" && echo "DB_PASSWORD=${{ env.DB_PASSWORD }}"'
      - name: Install dependencies
        run: go mod tidy
      - name: Run test
        env:
          MINIO_ENDPOINT: http://localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          DEFAULT_BUCKET: test-bucket
        run: go test ./... -coverprofile=./cover.out
      - name: Generate coverage reports
        run: pwd && ./coverage.sh > ./reports/test-summary.txt
      ####
      - name: Upload Go test results
        uses: actions/upload-artifact@v4
        with:
          name: backend_TestReports
          path: ./backend/reports/*

  backend-build:
    needs: backend-test
    name: backend - Build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build code
        run: |
          go mod download
          go build

  backend-golangci-lint:
    name: backend - Run Lint
    runs-on: ubuntu-latest
    needs: backend-build
    continue-on-error: true
    defaults:
      run:
        shell: bash
        working-directory: ./backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: go-${{ runner.os }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            go-${{ runner.os }}-
      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: golangci-${{ runner.os }}-${{ hashFiles('.github/workflows/ci.yaml') }}
          restore-keys: |
            golangci-${{ runner.os }}-
      - name: Install golangci-lint
        run: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - name: Run golangci-lint
        run: golangci-lint run --config=.golangci.yaml
